pipeline {
  agent any

  parameters {
    choice(
      name: 'ACTION',
      choices: ['apply', 'destroy'],
      description: 'Choose whether to apply or destroy the infrastructure'
    )
  }

  environment {
    TF_DIR = 'terraform'
    ANSIBLE_DIR = 'ansible'
    SSH_KEY_PATH = '/var/lib/jenkins/.ssh/id_rsa'
  }

  stages {

    stage('Checkout Code') {
      steps {
        git branch: 'main', url: 'https://github.com/nenavathsrinu/dev-cicd.git'
      }
    }

    stage('Terraform Init') {
      steps {
        withCredentials([[ 
          $class: 'AmazonWebServicesCredentialsBinding',
          credentialsId: 'aws-credentials'
        ]]) {
          dir("${TF_DIR}") {
            sh 'terraform init'
          }
        }
      }
    }

    stage('Terraform Apply or Destroy') {
      steps {
        withCredentials([[ 
          $class: 'AmazonWebServicesCredentialsBinding',
          credentialsId: 'aws-credentials'
        ]]) {
          dir("${TF_DIR}") {
            script {
              if (params.ACTION == 'apply') {
                sh 'terraform apply -auto-approve'
              } else if (params.ACTION == 'destroy') {
                sh 'terraform destroy -auto-approve'
              }
            }
          }
        }
      }
    }

    stage('Generate Ansible Inventory') {
      when {
        expression { params.ACTION == 'apply' }
      }
      steps {
        script {
          def publicIp = sh(
            script: "cd ${TF_DIR} && terraform output -raw ec2_public_ip",
            returnStdout: true
          ).trim()

          writeFile file: "${ANSIBLE_DIR}/inventory.ini", text: """
[web]
${publicIp} ansible_user=ec2-user ansible_ssh_private_key_file=${SSH_KEY_PATH}
"""

          echo "✅ Generated inventory.ini with IP: ${publicIp}"
        }
      }
    }

    stage('Run Ansible Playbook') {
      when {
        expression { params.ACTION == 'apply' }
      }
      steps {
        dir("${ANSIBLE_DIR}") {
          sh 'ansible-playbook -i inventory.ini site.yml'
        }
      }
    }
  }

  post {
    success {
      echo "✅ Pipeline completed successfully with ACTION: ${params.ACTION}"
    }
    failure {
      echo "❌ Pipeline failed during ACTION: ${params.ACTION}. Please check logs."
    }
  }
}
