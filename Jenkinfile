pipeline {
  agent any
  environment {
    TF_DIR = 'terraform'
    ANSIBLE_DIR = 'ansible'
    SSH_KEY_PATH = '/var/lib/jenkins/.ssh/id_rsa'
  }

  stages {
    stage('Checkout Code') {
      steps {
        git branch: 'main', url: 'https://github.com/nenavathsrinu/dev-cicd.git'
      }
    }

    stage('Terraform Init & Apply') {
      steps {
        withCredentials([[
          $class: 'AmazonWebServicesCredentialsBinding',
          credentialsId: 'aws-credentials'
        ]]) {
          dir("${TF_DIR}") {
            sh '''
              terraform init \
                -backend-config="bucket=lsg-terraform-s3-bucket" \
                -backend-config="key=dev/devops-cicd/terraform.tfstate" \
                -backend-config="region=ap-south-1" \
                -backend-config="dynamodb_table=terraform-lock" \
                -backend-config="encrypt=true" \
                -input=false

              terraform apply -auto-approve
            '''
          }
        }
      }
    }

    stage('Generate Ansible Inventory') {
      steps {
        sh '''
          cd terraform
          PUBLIC_IP=$(terraform output -raw ec2_public_ip)
          echo "[web]" > ../ansible/inventory.ini
          echo "$PUBLIC_IP ansible_user=ec2-user ansible_ssh_private_key_file=${SSH_KEY_PATH}" >> ../ansible/inventory.ini
        '''
      }
    }

    stage('Run Ansible Playbook') {
      steps {
        dir("${ANSIBLE_DIR}") {
          sh 'ansible-playbook -i inventory.ini site.yml'
        }
      }
    }
  }

  post {
    success {
      echo '✅ CI/CD Pipeline completed successfully!'
    }
    failure {
      echo '❌ Pipeline failed. Please check logs.'
    }
  }
}