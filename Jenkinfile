pipeline {
    agent any

    parameters {
        choice(name: 'ACTION', choices: ['create', 'destroy'], description: 'Choose whether to create or destroy infrastructure')
    }

    stages {
        stage('Terraform Init') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws-credentials'
                ]]) {
                    dir('terraform') {
                        sh '''
                            terraform init \
                                -backend-config=bucket=lsg-terraform-s3-bucket \
                                -backend-config=key=dev/devops-cicd/terraform.tfstate \
                                -backend-config=region=ap-south-1 \
                                -backend-config=dynamodb_table=terraform-lock \
                                -backend-config=encrypt=true
                        '''
                    }
                }
            }
        }

        stage('Terraform Apply or Destroy') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws-credentials'
                ]]) {
                    dir('terraform') {
                        script {
                            if (params.ACTION == 'create') {
                                sh 'terraform apply -auto-approve -var-file="dev.tfvars"'
                            } else {
                                sh 'terraform destroy -auto-approve -var-file="dev.tfvars"'
                            }
                        }
                    }
                }
            }
        }

        stage('Wait and Generate Inventory') {
            when {
                expression { params.ACTION == 'create' }
            }
            steps {
                script {
                    echo "Waiting 60 seconds for EC2 instance to initialize..."
                    sleep(time: 60, unit: "SECONDS")
                }

                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws-credentials'
                ]]) {
                    dir('terraform') {
                        script {
                            def publicIp = sh(script: 'terraform output -raw ec2_public_ip', returnStdout: true).trim()
                            writeFile file: '../ansible/inventory.ini', text: "${publicIp} ansible_user=ec2-user ansible_ssh_private_key_file=/var/lib/jenkins/.ssh/id_rsa\n"
                        }
                    }
                }
            }
        }

        stage('Run Ansible Playbook') {
            when {
                expression { params.ACTION == 'create' }
            }
            steps {
                sh '''
                    chmod 600 /var/lib/jenkins/.ssh/id_rsa
                    export ANSIBLE_CONFIG=ansible/ansible.cfg
                    ansible-playbook -i ansible/inventory.ini ansible/site.yml
                '''
            }
        }
    }

    post {
        failure {
            echo "‚ùå Pipeline failed. Please check the logs."
        }
    }
}
