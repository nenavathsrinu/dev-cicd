pipeline {
  agent any

  environment {
    TF_DIR = 'terraform'
    ANSIBLE_DIR = 'ansible'
    SSH_KEY_PATH = '/var/lib/jenkins/.ssh/id_rsa'
  }

  parameters {
    choice(name: 'ACTION', choices: ['create', 'destroy'], description: 'Choose whether to create or destroy the infrastructure')
  }

  stages {
    stage('Checkout Code') {
      steps {
        git branch: 'main', url: 'https://github.com/nenavathsrinu/dev-cicd.git'
      }
    }

    stage('Terraform Init & Apply/Destroy') {
      steps {
        withCredentials([[
          $class: 'AmazonWebServicesCredentialsBinding',
          credentialsId: 'aws-credentials'
        ]]) {
          dir("${TF_DIR}") {
            script {
              sh '''
                terraform init -backend-config=bucket=lsg-terraform-s3-bucket \
                               -backend-config=key=dev/devops-cicd/terraform.tfstate \
                               -backend-config=region=ap-south-1 \
                               -backend-config=dynamodb_table=terraform-lock \
                               -backend-config=encrypt=true
              '''

              if (params.ACTION == 'create') {
                sh 'terraform apply -auto-approve'
              } else {
                sh 'terraform destroy -auto-approve'
              }
            }
          }
        }
      }
    }

    stage('Fetch Public IP & Generate Inventory') {
      when {
        expression { params.ACTION == 'create' }
      }
      steps {
        script {
          def publicIp = sh(
            script: "terraform -chdir=${TF_DIR} output -raw ec2_public_ip",
            returnStdout: true
          ).trim()

          echo "✅ EC2 Public IP: ${publicIp}"

          writeFile file: "${ANSIBLE_DIR}/inventory.ini", text: """
[web]
${publicIp} ansible_user=ec2-user ansible_ssh_private_key_file=${SSH_KEY_PATH}
"""
        }
      }
    }

    stage('Wait for SSH to Become Available') {
      when {
        expression { params.ACTION == 'create' }
      }
      steps {
        script {
          def ip = sh(script: "terraform -chdir=${TF_DIR} output -raw ec2_public_ip", returnStdout: true).trim()

          echo "⏳ Waiting for SSH on ${ip}..."
          def reachable = false
          for (int i = 0; i < 6; i++) {
            def result = sh(
              script: "ssh -o StrictHostKeyChecking=no -i ${SSH_KEY_PATH} ec2-user@${ip} 'echo ready' || true",
              returnStdout: true
            ).trim()

            if (result.contains("ready")) {
              reachable = true
              break
            } else {
              echo "❌ SSH not ready, retrying in 10 seconds..."
              sleep 10
            }
          }

          if (!reachable) {
            error("❌ Instance not reachable over SSH within timeout.")
          }

          echo "✅ SSH is now available."
        }
      }
    }

    stage('Run Ansible Playbook') {
      when {
        expression { params.ACTION == 'create' }
      }
      steps {
        dir("${ANSIBLE_DIR}") {
          sh 'ansible-playbook -i inventory.ini site.yml'
        }
      }
    }
  }

  post {
    success {
      echo '✅ Pipeline completed successfully!'
    }
    failure {
      echo '❌ Pipeline failed. Please check the logs.'
    }
  }
}