pipeline {
  agent any

  parameters {
    choice(name: 'ACTION', choices: ['create', 'destroy'], description: 'Choose whether to create or destroy the infrastructure')
  }

  environment {
    AWS_REGION = 'ap-south-1'
    TF_VAR_region = "${env.AWS_REGION}"
  }

  stages {
    stage('Terraform Init') {
      steps {
        withCredentials([[
          $class: 'AmazonWebServicesCredentialsBinding',
          credentialsId: 'aws-credentials'
        ]]) {
          dir('terraform') {
            sh '''
              terraform init -backend-config=bucket=lsg-terraform-s3-bucket \
                             -backend-config=key=dev/devops-cicd/terraform.tfstate \
                             -backend-config=region=ap-south-1 \
                             -backend-config=dynamodb_table=terraform-lock \
                             -backend-config=encrypt=true
            '''
          }
        }
      }
    }

    stage('Terraform Apply or Destroy') {
      steps {
        withCredentials([[
          $class: 'AmazonWebServicesCredentialsBinding',
          credentialsId: 'aws-credentials'
        ]]) {
          dir('terraform') {
            script {
              if (params.ACTION == 'create') {
                sh 'terraform apply -auto-approve'
              } else if (params.ACTION == 'destroy') {
                sh 'terraform destroy -auto-approve'
              }
            }
          }
        }
      }
    }

    stage('Wait for EC2 Boot and Get Public IP') {
      when {
        expression { return params.ACTION == 'create' }
      }
      steps {
        script {
          echo "Waiting 60 seconds for EC2 instance to initialize..."
          sleep(time: 60, unit: 'SECONDS')
        }
        withCredentials([[
          $class: 'AmazonWebServicesCredentialsBinding',
          credentialsId: 'aws-credentials'
        ]]) {
          dir('terraform') {
            script {
              def public_ip = sh(script: 'terraform output -raw ec2_public_ip', returnStdout: true).trim()
              writeFile file: '../ansible/inventory', text: "[web]\n${public_ip} ansible_user=ec2-user ansible_ssh_private_key_file=~/.ssh/id_rsa_ansible"
            }
          }
        }
      }
    }

    stage('Run Ansible Playbook') {
      when {
        expression { return params.ACTION == 'create' }
      }
      steps {
        withCredentials([sshUserPrivateKey(credentialsId: 'ansible', keyFileVariable: 'ANSIBLE_KEY', usernameVariable: 'ANSIBLE_USER')]) {
          dir('ansible') {
            sh '''
              cp $ANSIBLE_KEY ~/.ssh/id_rsa_ansible
              chmod 600 ~/.ssh/id_rsa_ansible
              ansible-playbook -i inventory site.yml
            '''
          }
        }
      }
    }
  }

  post {
    failure {
      echo "❌ Pipeline failed. Please check the logs."
    }
    success {
      echo "✅ Pipeline completed successfully."
    }
  }
}
