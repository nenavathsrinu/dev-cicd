pipeline {
  agent any

  parameters {
    choice(name: 'ACTION', choices: ['create', 'destroy'], description: 'Choose to create or destroy infrastructure')
  }

  environment {
    TF_DIR = 'terraform'
    ANSIBLE_DIR = 'ansible'
    SSH_KEY_PATH = '/var/lib/jenkins/.ssh/id_rsa'
  }

  stages {

    stage('Checkout Code') {
      steps {
        git url: 'https://github.com/nenavathsrinu/dev-cicd.git', branch: 'main'
      }
    }

    stage('Terraform Init & Apply/Destroy') {
      steps {
        withCredentials([[
          $class: 'AmazonWebServicesCredentialsBinding',
          credentialsId: 'aws-credentials'  // Your Jenkins AWS credential ID
        ]]) {
          dir("${TF_DIR}") {
            script {
              sh """
                terraform init \
                  -backend-config=bucket=lsg-terraform-s3-bucket \
                  -backend-config=key=dev/devops-cicd/terraform.tfstate \
                  -backend-config=region=ap-south-1 \
                  -backend-config=dynamodb_table=terraform-lock \
                  -backend-config=encrypt=true

                if [ "${params.ACTION}" == "create" ]; then
                  terraform apply -auto-approve
                else
                  terraform destroy -auto-approve
                fi
              """
            }
          }
        }
      }
    }

    stage('Wait After Creation') {
      when {
        expression { params.ACTION == 'create' }
      }
      steps {
        echo "⏳ Waiting 60 seconds for instance to initialize..."
        sleep time: 60, unit: 'SECONDS'
      }
    }

    stage('Fetch Public IP & Generate Inventory') {
      when {
        expression { params.ACTION == 'create' }
      }
      steps {
        withCredentials([[
          $class: 'AmazonWebServicesCredentialsBinding',
          credentialsId: 'aws-credentials'
        ]]) {
          script {
            def publicIp = sh(
              script: "terraform -chdir=${TF_DIR} output -raw ec2_public_ip",
              returnStdout: true
            ).trim()

            echo "✅ EC2 Public IP: ${publicIp}"

            writeFile file: "${ANSIBLE_DIR}/inventory.ini", text: """
[web]
${publicIp} ansible_user=ec2-user ansible_ssh_private_key_file=${SSH_KEY_PATH}
"""
          }
        }
      }
    }

    stage('Wait for SSH to Become Available') {
      when {
        expression { params.ACTION == 'create' }
      }
      steps {
        script {
          def retries = 10
          def success = false
          def publicIp = sh(script: "terraform -chdir=${TF_DIR} output -raw ec2_public_ip", returnStdout: true).trim()

          for (int i = 0; i < retries; i++) {
            def result = sh(
              script: "nc -zv ${publicIp} 22",
              returnStatus: true
            )
            if (result == 0) {
              echo "✅ SSH port is open!"
              success = true
              break
            } else {
              echo "❌ SSH not available. Retrying in 10 seconds... ($i/${retries})"
              sleep 10
            }
          }

          if (!success) {
            error("❌ EC2 instance is not reachable via SSH after multiple retries.")
          }
        }
      }
    }

    stage('Run Ansible Playbook') {
      when {
        expression { params.ACTION == 'create' }
      }
      steps {
        dir("${ANSIBLE_DIR}") {
          sh "ansible-playbook -i inventory.ini playbook.yml"
        }
      }
    }
  }

  post {
    success {
      script {
        if (params.ACTION == 'destroy') {
          echo "✅ Infrastructure destroyed successfully!"
        } else {
          echo "✅ Pipeline completed successfully!"
        }
      }
    }
    failure {
      echo "❌ Pipeline failed. Please check the logs."
    }
  }
}
