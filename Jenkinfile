pipeline {
  agent any

  parameters {
    choice(name: 'ACTION', choices: ['create', 'destroy'], description: 'Choose whether to create or destroy the infrastructure')
  }

  environment {
    TF_DIR = "terraform"
    ANSIBLE_DIR = "ansible"
    SSH_KEY_PATH = "~/.ssh/id_rsa" // Update if you use a different key
  }

  stages {
    stage('Checkout Code') {
      steps {
        git url: 'https://github.com/nenavathsrinu/dev-cicd.git', branch: 'main'
      }
    }

    stage('Terraform Init & Apply/Destroy') {
      steps {
        withCredentials([[
          $class: 'AmazonWebServicesCredentialsBinding',
          credentialsId: 'aws-credentials'
        ]]) {
          dir("${TF_DIR}") {
            script {
              sh """
                terraform init \
                  -backend-config=bucket=lsg-terraform-s3-bucket \
                  -backend-config=key=dev/devops-cicd/terraform.tfstate \
                  -backend-config=region=ap-south-1 \
                  -backend-config=dynamodb_table=terraform-lock \
                  -backend-config=encrypt=true
              """

              if (params.ACTION == 'create') {
                sh "terraform apply -auto-approve"
              } else {
                sh "terraform destroy -auto-approve"
              }
            }
          }
        }
      }
    }

    stage('Wait for EC2 to Boot') {
      when {
        expression { params.ACTION == 'create' }
      }
      steps {
        echo "‚è≥ Waiting 60 seconds for EC2 instance to boot and allow SSH..."
        sleep(time: 60, unit: 'SECONDS')
      }
    }

    stage('Fetch Public IP & Generate Inventory') {
      when {
        expression { params.ACTION == 'create' }
      }
      steps {
        withCredentials([[
          $class: 'AmazonWebServicesCredentialsBinding',
          credentialsId: 'aws-credentials'
        ]]) {
          script {
            def publicIp = sh(
              script: "terraform -chdir=${TF_DIR} output -raw ec2_public_ip",
              returnStdout: true
            ).trim()

            echo "‚úÖ EC2 Public IP: ${publicIp}"

            writeFile file: "${ANSIBLE_DIR}/inventory.ini", text: """
[web]
${publicIp} ansible_user=ec2-user ansible_ssh_private_key_file=${SSH_KEY_PATH}
"""
          }
        }
      }
    }

    stage('Wait for SSH to Become Available') {
      when {
        expression { params.ACTION == 'create' }
      }
      steps {
        script {
          def retries = 5
          def success = false
          def ip = sh(script: "terraform -chdir=${TF_DIR} output -raw ec2_public_ip", returnStdout: true).trim()

          for (int i = 0; i < retries; i++) {
            def result = sh(script: "nc -zv ${ip} 22", returnStatus: true)
            if (result == 0) {
              echo "‚úÖ SSH is available on ${ip}"
              success = true
              break
            }
            echo "üîÅ Waiting for SSH on ${ip} (attempt ${i + 1}/$retries)"
            sleep(time: 10, unit: 'SECONDS')
          }

          if (!success) {
            error("‚ùå SSH is not available on ${ip}")
          }
        }
      }
    }

    stage('Run Ansible Playbook') {
      when {
        expression { params.ACTION == 'create' }
      }
      steps {
        dir("${ANSIBLE_DIR}") {
          sh "ansible-playbook -i inventory.ini install-node.yml"
        }
      }
    }
  }

  post {
    success {
      script {
        if (params.ACTION == 'create') {
          echo "‚úÖ Infrastructure created and configured successfully!"
        } else {
          echo "‚úÖ Infrastructure destroyed successfully!"
        }
      }
    }
    failure {
      echo "‚ùå Pipeline failed. Please check the logs."
    }
  }
}
