pipeline {
  agent any

  parameters {
    booleanParam(name: 'create_destroy', defaultValue: true, description: 'Set to true to create infra, false to destroy')
  }

  environment {
    AWS_DEFAULT_REGION = 'ap-south-1'
    TF_VAR_region = 'ap-south-1'
  }

  stages {
    stage('Terraform Init') {
      steps {
        withCredentials([[
          $class: 'AmazonWebServicesCredentialsBinding',
          credentialsId: 'aws-cred-id' // Replace with your Jenkins AWS credential ID
        ]]) {
          dir('terraform') {
            sh '''
              terraform init \
                -backend-config="bucket=lsg-terraform-s3-bucket" \
                -backend-config="key=dev/devops-cicd/terraform.tfstate" \
                -backend-config="region=ap-south-1" \
                -backend-config="dynamodb_table=terraform-lock" \
                -backend-config="encrypt=true"
            '''
          }
        }
      }
    }

    stage('Terraform Apply or Destroy') {
      steps {
        dir('terraform') {
          script {
            if (params.create_destroy) {
              echo "✅ Creating infrastructure..."
              sh 'terraform apply -auto-approve'
            } else {
              echo "⚠️ Destroying infrastructure..."
              sh 'terraform destroy -auto-approve'
            }
          }
        }
      }
    }

    stage('Wait for EC2 & Fetch Public IP') {
      when {
        expression { return params.create_destroy }
      }
      steps {
        echo "⏳ Waiting 60 seconds for EC2 to initialize..."
        sleep(time: 60, unit: 'SECONDS')

        script {
          env.PUBLIC_IP = sh(script: "terraform -chdir=terraform output -raw ec2_public_ip", returnStdout: true).trim()
          echo "EC2 Public IP: ${env.PUBLIC_IP}"
        }
      }
    }

    stage('Generate Ansible Inventory') {
      when {
        expression { return params.create_destroy }
      }
      steps {
        sh '''
          echo "[web]" > inventory
          echo "${PUBLIC_IP} ansible_user=ec2-user ansible_ssh_private_key_file=~/.ssh/id_rsa" >> inventory
        '''
      }
    }

    stage('Run Ansible Playbook') {
      when {
        expression { return params.create_destroy }
      }
      steps {
        sh 'ansible-playbook -i inventory site.yaml'
      }
    }
  }

  post {
    failure {
      echo '❌ Pipeline failed. Please check the logs.'
    }
    success {
      echo '✅ Pipeline completed successfully.'
    }
  }
}
