pipeline {
  agent any

  parameters {
    choice(name: 'ACTION', choices: ['create', 'destroy'], description: 'Terraform action to perform')
  }

  environment {
    TF_VAR_key_name = 'jenkins-key'
    TF_VAR_region = 'ap-south-1'
    TF_VAR_instance_type = 't2.micro'
  }

  stages {
    stage('Terraform Init') {
      steps {
        withCredentials([[
          $class: 'AmazonWebServicesCredentialsBinding',
          credentialsId: 'aws-credentials'
        ]]) {
          dir('terraform') {
            sh '''
              terraform init \
                -backend-config=bucket=lsg-terraform-s3-bucket \
                -backend-config=key=dev/devops-cicd/terraform.tfstate \
                -backend-config=region=ap-south-1 \
                -backend-config=dynamodb_table=terraform-lock \
                -backend-config=encrypt=true
            '''
          }
        }
      }
    }

    stage('Terraform Apply or Destroy') {
      steps {
        withCredentials([[
          $class: 'AmazonWebServicesCredentialsBinding',
          credentialsId: 'aws-credentials'
        ]]) {
          dir('terraform') {
            script {
              if (params.ACTION == 'create') {
                sh 'terraform apply -auto-approve'
              } else {
                sh 'terraform destroy -auto-approve'
              }
            }
          }
        }
      }
    }

    stage('Wait for EC2 and Fetch IP') {
      when {
        expression { return params.ACTION == 'create' }
      }
      steps {
        echo 'Waiting 60 seconds for EC2 instance to initialize...'
        sleep(time: 60, unit: 'SECONDS')

        withCredentials([[
          $class: 'AmazonWebServicesCredentialsBinding',
          credentialsId: 'aws-credentials'
        ]]) {
          dir('terraform') {
            script {
              def publicIp = sh(script: 'terraform output -raw ec2_public_ip', returnStdout: true).trim()
              writeFile file: 'inventory.ini', text: """
[web]
${publicIp} ansible_user=ec2-user
"""
            }
          }
        }
      }
    }

    stage('Run Ansible Playbook') {
      when {
        expression { return params.ACTION == 'create' }
      }
      steps {
        withCredentials([
          sshUserPrivateKey(credentialsId: 'ansible-key', keyFileVariable: 'SSH_KEY')
        ]) {
          sh '''
            ansible-playbook -i terraform/inventory.ini ansible/site.yml --private-key=$SSH_KEY
          '''
        }
      }
    }
  }

  post {
    failure {
      echo "‚ùå Pipeline failed. Please check the logs."
    }
  }
}
