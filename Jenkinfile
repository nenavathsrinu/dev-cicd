pipeline {
  agent any

  parameters {
    choice(name: 'create_or_destroy', choices: ['create', 'destroy'], description: 'Choose whether to create or destroy infrastructure')
  }

  environment {
    TF_DIR = 'terraform'
    ANSIBLE_DIR = 'ansible'
    SSH_KEY_PATH = '/var/lib/jenkins/.ssh/id_rsa'
  }

  stages {

    stage('Checkout Code') {
      steps {
        git branch: 'main', url: 'https://github.com/nenavathsrinu/dev-cicd.git'
      }
    }

    stage('Terraform Init') {
      steps {
        withCredentials([[
          $class: 'AmazonWebServicesCredentialsBinding',
          credentialsId: 'aws-credentials'
        ]]) {
          dir("${TF_DIR}") {
            sh 'terraform init'
          }
        }
      }
    }

    stage('Terraform Apply or Destroy') {
      steps {
        withCredentials([[
          $class: 'AmazonWebServicesCredentialsBinding',
          credentialsId: 'aws-credentials'
        ]]) {
          dir("${TF_DIR}") {
            script {
              if (params.create_or_destroy == 'create') {
                sh 'terraform apply -auto-approve'
              } else if (params.create_or_destroy == 'destroy') {
                sh 'terraform destroy -auto-approve'
              }
            }
          }
        }
      }
    }

    stage('Generate Ansible Inventory') {
      when {
        expression { return params.create_or_destroy == 'create' }
      }
      steps {
        sh '''
          cd terraform
          PUBLIC_IP=$(terraform output -raw ec2_public_ip)

          echo "[web]" > ../ansible/inventory.ini
          echo "$PUBLIC_IP ansible_user=ec2-user ansible_ssh_private_key_file=${SSH_KEY_PATH}" >> ../ansible/inventory.ini
        '''
      }
    }

    stage('Run Ansible Playbook') {
      when {
        expression { return params.create_or_destroy == 'create' }
      }
      steps {
        dir("${ANSIBLE_DIR}") {
          sh 'ansible-playbook -i inventory.ini site.yml'
        }
      }
    }
  }

  post {
    success {
      echo "✅ Infrastructure ${params.create_or_destroy} process completed successfully!"
    }
    failure {
      echo "❌ ${params.create_or_destroy} process failed. Check logs."
    }
  }
}