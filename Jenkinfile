pipeline {
  agent any

  parameters {
    choice(
      name: 'ACTION',
      choices: ['create', 'destroy'],
      description: 'Choose whether to create or destroy the infrastructure.'
    )
  }

  environment {
    TF_DIR = 'terraform'
    ANSIBLE_DIR = 'ansible'
    SSH_KEY_PATH = '/var/lib/jenkins/.ssh/id_rsa'
  }

  stages {
    stage('Checkout Code') {
      steps {
        checkout scm
      }
    }

    stage('Terraform Init') {
      parallel {
        stage('Init ap-south-1') {
          steps {
            withCredentials([[ $class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials' ]]) {
              dir("${TF_DIR}") {
                sh '''
                  cp backend/backend-ap-south-1.tf backend.tf
                  terraform init
                  rm -f backend.tf
                '''
              }
            }
          }
        }

        stage('Init us-east-1') {
          steps {
            withCredentials([[ $class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials' ]]) {
              dir("${TF_DIR}") {
                sh '''
                  cp backend/backend-us-east-1.tf backend.tf
                  terraform init
                  rm -f backend.tf
                '''
              }
            }
          }
        }
      }
    }

    stage('Terraform Apply/Destroy') {
      parallel {
        stage('ap-south-1 Infra') {
          steps {
            withCredentials([[ $class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials' ]]) {
              dir("${TF_DIR}") {
                script {
                  def tfFile = "terraform-ap-south-1.tfvars"
                  if (params.ACTION == 'destroy') {
                    echo "üóëÔ∏è Destroying ap-south-1 infrastructure..."
                    sh "terraform destroy -auto-approve -var-file=${tfFile}"
                  } else {
                    echo "üöÄ Creating ap-south-1 infrastructure..."
                    sh "terraform apply -auto-approve -var-file=${tfFile}"
                  }
                }
              }
            }
          }
        }

        stage('us-east-1 Infra') {
          steps {
            withCredentials([[ $class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials' ]]) {
              dir("${TF_DIR}") {
                script {
                  def tfFile = "terraform-us-east-1.tfvars"
                  if (params.ACTION == 'destroy') {
                    echo "üóëÔ∏è Destroying us-east-1 infrastructure..."
                    sh "terraform destroy -auto-approve -var-file=${tfFile}"
                  } else {
                    echo "üöÄ Creating us-east-1 infrastructure..."
                    sh "terraform apply -auto-approve -var-file=${tfFile}"
                  }
                }
              }
            }
          }
        }
      }
    }

    stage('Wait and Generate Inventory') {
      when {
        expression { return params.ACTION == 'create' }
      }
      steps {
        echo '‚è≥ Waiting for EC2 instance to initialize...'
        sleep time: 60, unit: 'SECONDS'

        withCredentials([[ $class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials' ]]) {
          dir("${TF_DIR}") {
            script {
              def publicIp = sh(script: "terraform output -raw ec2_public_ip", returnStdout: true).trim()
              echo "üì° EC2 Public IP: ${publicIp}"

              writeFile file: "../${ANSIBLE_DIR}/inventory.ini", text: """[web]
${publicIp} ansible_user=ec2-user ansible_ssh_private_key_file=${SSH_KEY_PATH}
"""
            }
          }
        }
      }
    }

    stage('Run Ansible Playbook') {
      when {
        expression { return params.ACTION == 'create' }
      }
      steps {
        dir("${ANSIBLE_DIR}") {
          sh '''
            chmod 600 ${SSH_KEY_PATH}
            ansible-playbook -i inventory.ini site.yml
          '''
        }
      }
    }
  }

  post {
    failure {
      echo "‚ùå Pipeline failed. Please check the logs."
    }
    success {
      echo "‚úÖ Pipeline executed successfully."
    }
  }
}