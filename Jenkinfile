pipeline {
  agent any

  environment {
    TF_DIR = 'terraform'
  }

  stages {
    stage('Terraform Init & Apply') {
      steps {
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-cred-id']]) {
          dir("${TF_DIR}") {
            sh '''
              terraform init -backend-config="bucket=lsg-terraform-s3-bucket" \
                             -backend-config="key=dev/devops-cicd/terraform.tfstate" \
                             -backend-config="region=ap-south-1" \
                             -backend-config="dynamodb_table=terraform-lock" \
                             -backend-config="encrypt=true"

              terraform apply -auto-approve
            '''
          }
        }
      }
    }

    stage('Get EC2 Public IP') {
      steps {
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-cred-id']]) {
          script {
            def publicIp = sh(script: "terraform -chdir=${TF_DIR} output -raw ec2_public_ip", returnStdout: true).trim()
            echo "✅ EC2 Public IP: ${publicIp}"
          }
        }
      }
    }

    stage('Run Ansible Playbook') {
      steps {
        sh '''
          ansible-playbook -i ${TF_DIR}/inventory.ini playbook.yml
        '''
      }
    }
  }

  post {
    failure {
      echo "❌ Pipeline failed. Please check the logs."
    }
  }
}
