pipeline {
  agent any

  environment {
    TF_DIR = 'terraform'
    ANSIBLE_DIR = 'ansible'
    SSH_KEY_PATH = '/var/lib/jenkins/.ssh/id_rsa'
  }

  parameters {
    choice(name: 'ACTION', choices: ['create', 'destroy'], description: 'Choose whether to create or destroy the infrastructure')
  }

  stages {
    stage('Checkout Code') {
      steps {
        git branch: 'main', url: 'https://github.com/nenavathsrinu/dev-cicd.git'
      }
    }

    stage('Terraform Init & Apply/Destroy') {
      steps {
        withCredentials([[
          $class: 'AmazonWebServicesCredentialsBinding',
          credentialsId: 'aws-credentials'
        ]]) {
          dir("${TF_DIR}") {
            script {
              sh 'terraform init -backend-config=bucket=lsg-terraform-s3-bucket -backend-config=key=dev/devops-cicd/terraform.tfstate -backend-config=region=ap-south-1 -backend-config=dynamodb_table=terraform-lock -backend-config=encrypt=true'

              if (params.ACTION == 'create') {
                sh 'terraform apply -auto-approve'
              } else if (params.ACTION == 'destroy') {
                sh 'terraform destroy -auto-approve'
              }
            }
          }
        }
      }
    }

    stage('Generate Ansible Inventory') {
      when {
        expression { params.ACTION == 'create' }
      }
      steps {
        sh '''
          cd terraform
          PUBLIC_IP=$(terraform output -raw ec2_public_ip)
          echo "[web]" > ../ansible/inventory.ini
          echo "$PUBLIC_IP ansible_user=ec2-user ansible_ssh_private_key_file=${SSH_KEY_PATH}" >> ../ansible/inventory.ini
        '''
      }
    }

    stage('Wait for SSH') {
      when {
        expression { params.ACTION == 'create' }
      }
      steps {
        sh '''
          echo "⏳ Waiting up to 60 seconds for SSH to become available..."
          for i in {1..6}; do
            IP=$(terraform -chdir=terraform output -raw ec2_public_ip)
            ssh -o StrictHostKeyChecking=no -i ${SSH_KEY_PATH} ec2-user@$IP 'echo "✅ SSH is ready."' && break
            echo "❌ SSH not ready, retrying in 10 seconds..."
            sleep 10
          done
        '''
      }
    }

    stage('Run Ansible Playbook') {
      when {
        expression { params.ACTION == 'create' }
      }
      steps {
        dir("${ANSIBLE_DIR}") {
          sh 'ansible-playbook -i inventory.ini site.yml'
        }
      }
    }
  }

  post {
    success {
      echo '✅ Pipeline completed successfully!'
    }
    failure {
      echo '❌ Pipeline failed. Please check the logs for details.'
    }
  }
}