pipeline {
  agent any

  environment {
    TF_DIR = 'terraform'
    ANSIBLE_DIR = 'ansible'
    SSH_KEY_PATH = '/var/lib/jenkins/.ssh/id_rsa'
  }

  parameters {
    choice(name: 'CREATE_OR_DESTROY', choices: ['create', 'destroy'], description: 'Choose to create or destroy infrastructure')
  }

  stages {

    stage('Checkout Code') {
      steps {
        git branch: 'main', url: 'https://github.com/nenavathsrinu/dev-cicd.git'
      }
    }

    stage('Terraform Init & Action') {
      steps {
        withCredentials([[
          $class: 'AmazonWebServicesCredentialsBinding',
          credentialsId: 'aws-credentials'
        ]]) {
          dir("${TF_DIR}") {
            script {
              sh '''
                terraform init \
                  -backend-config="bucket=lsg-terraform-s3-bucket" \
                  -backend-config="key=dev/devops-cicd/terraform.tfstate" \
                  -backend-config="region=ap-south-1" \
                  -backend-config="dynamodb_table=terraform-lock" \
                  -backend-config="encrypt=true"
              '''

              if (params.CREATE_OR_DESTROY == 'create') {
                sh 'terraform apply -auto-approve'
              } else {
                sh 'terraform destroy -auto-approve'
              }
            }
          }
        }
      }
    }

    stage('Generate Ansible Inventory') {
      when {
        expression { params.CREATE_OR_DESTROY == 'create' }
      }
      steps {
        withCredentials([[
          $class: 'AmazonWebServicesCredentialsBinding',
          credentialsId: 'aws-credentials'
        ]]) {
          sh '''
            cd terraform
            PUBLIC_IP=$(terraform output -raw ec2_public_ip)

            echo "[web]" > ../ansible/inventory.ini
            echo "$PUBLIC_IP ansible_user=ec2-user ansible_ssh_private_key_file=${SSH_KEY_PATH}" >> ../ansible/inventory.ini

            echo "✅ Generated inventory.ini with IP: $PUBLIC_IP"
          '''
        }
      }
    }

    stage('Run Ansible Playbook') {
      when {
        expression { params.CREATE_OR_DESTROY == 'create' }
      }
      steps {
        dir("${ANSIBLE_DIR}") {
          sh 'ansible-playbook -i inventory.ini site.yml'
        }
      }
    }
  }

  post {
    success {
      echo '✅ Pipeline completed successfully!'
    }
    failure {
      echo '❌ Pipeline failed. Please check the logs.'
    }
  }
}