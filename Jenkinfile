pipeline {
  agent any

  parameters {
    choice(name: 'ACTION', choices: ['create', 'destroy'], description: 'Create or destroy the infrastructure')
    choice(name: 'REGION', choices: ['ap-south-1', 'us-east-1'], description: 'Select AWS Region')
  }

  environment {
    TF_DIR = 'terraform'
    ANSIBLE_DIR = 'ansible'
    SSH_KEY_PATH = '/var/lib/jenkins/.ssh/id_rsa'
    TF_VAR_region = "${params.REGION}"
  }

  stages {
    stage('Checkout Code') {
      steps {
        checkout scm
      }
    }

    stage('Terraform Init') {
      steps {
        withCredentials([[ $class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials' ]]) {
          dir("${TF_DIR}") {
            sh """
              cp backend/backend-${params.REGION}.tf backend.tf
              terraform init -reconfigure
              rm -f backend.tf
            """
          }
        }
      }
    }

    stage('Terraform Apply/Destroy') {
      steps {
        withCredentials([[ $class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials' ]]) {
          dir("${TF_DIR}") {
            script {
              def tfFile = "terraform-${params.REGION}.tfvars"

              echo "üîÅ Re-initializing backend before action..."
              sh """
                cp backend/backend-${params.REGION}.tf backend.tf
                terraform init -reconfigure
              """

              if (params.ACTION == 'destroy') {
                echo "üóëÔ∏è Destroying ${params.REGION} infrastructure..."
                sh "terraform destroy -auto-approve -var-file=${tfFile}"
              } else {
                echo "üöÄ Creating ${params.REGION} infrastructure..."
                sh "terraform apply -auto-approve -var-file=${tfFile}"
              }

              sh "rm -f backend.tf"
            }
          }
        }
      }
    }

    stage('Wait and Generate Inventory') {
      when {
        expression { return params.ACTION == 'create' }
      }
      steps {
        echo '‚è≥ Waiting for EC2 instance to initialize...'
        sleep time: 60, unit: 'SECONDS'

        withCredentials([[ $class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials' ]]) {
          dir("${TF_DIR}") {
            script {
              def publicIp = sh(script: "terraform output -raw ec2_public_ip", returnStdout: true).trim()
              echo "üì° EC2 Public IP: ${publicIp}"

              writeFile file: "../${ANSIBLE_DIR}/inventory.ini", text: """[web]
${publicIp} ansible_user=ec2-user ansible_ssh_private_key_file=${SSH_KEY_PATH}
"""
            }
          }
        }
      }
    }

    stage('Run Ansible Playbook') {
      when {
        expression { return params.ACTION == 'create' }
      }
      steps {
        dir("${ANSIBLE_DIR}") {
          sh """
            chmod 600 ${SSH_KEY_PATH}
            ansible-playbook -i inventory.ini site.yml
          """
        }
      }
    }
  }

  post {
    failure {
      echo "‚ùå Pipeline failed. Please check the logs."
    }
    success {
      echo "‚úÖ Pipeline executed successfully."
    }
  }
}